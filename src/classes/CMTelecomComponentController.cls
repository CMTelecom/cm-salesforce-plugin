/**
* @author DaniÃ«l Loriaux - 7dots <daniel.loriaux@7dots.eu>
* @date 2017
*
* @description Controller for lightning components that uses the APIConsumer.
*/
global without sharing class CMTelecomComponentController {

	/**
    * @description Sends a message.
	* @param sender The phone number that sends the message.
	* @param receiver The phone number that receives the message.
	* @param message The message to be send from the sender to receiver.
	* @param origin The source the message has been send from.
	* @param recordID The recordid for which this proces was fired.
	* @return String The response generated by the request.
    */
	@AuraEnabled
	global static String sendMessage(String sender, String receiver, String message, String origin, String recordID) {
		return JSON.serialize(CMTelecomAPIConsumer.sendMessage(sender, receiver, message, origin, recordID));
	}

	/**
    * @description Method that returns a the current user (as selected) and a list of numbers from the CMTelecomPhoneNumber object.
	* @return String The response generated by the request. Including the list of phones in the custom items property.
    */
	@AuraEnabled
	global static String getPhoneSelectValues() {
		List<SelectItem> selectItemList = new List<SelectItem>();

		// Get current user phone
		List<User> userList = [
			SELECT 	Name, Phone
			FROM 	User
			WHERE 	ID = :UserInfo.getUserId()
			AND 	Phone != ''
		];
		if(!userList.isEmpty()) {
			selectItemList.add(new SelectItem(userList[0].Name + ' (Current user) ' + '<' + userList[0].Phone + '>', userList[0].Phone, 'true'));
		}

		// Get all users phone
		List<SMS_Sender__c> phoneList = [
			SELECT 	Name, Phone__c
			FROM 	SMS_Sender__c
		];
		for(SMS_Sender__c p : phoneList){
			selectItemList.add(new SelectItem(p.Name + ' <' + p.Phone__c + '>', p.Phone__c));
		}

		// Show Other if any other option is available
		if(selectItemList.isEmpty()) {
			selectItemList.add(new SelectItem('No sender found..', 'Other'));
		} else {
			selectItemList.add(new SelectItem('Other..', 'Other'));
		}


		// Return the custom Response
		ResponseSelect responseSelect = new ResponseSelect(CMTelecomAPIConsumer.STATUS_OK, null);
		responseSelect.items = selectItemList;
		return JSON.serialize(responseSelect);
	}

	/**
    * @description Method that uses an field API name and record ID to figure out the phone value.
	* @return String The response generated by the request. Including the phone value in the details property.
    */
	@AuraEnabled
	global static String getPhoneField(string apiPhoneHandle, ID recordID) {

		// Check if the property is filled, if not leave the field empty
		if(apiPhoneHandle == '' || apiPhoneHandle == null) {
			return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_OK, ''));
			// return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_BAD_REQUEST, 'No phone field linked.'));
		}

		// Get the object API name and use it to generate a query
		Schema.SObjectType sobjectType = recordID.getSObjectType();
		String sobjectName = sobjectType.getDescribe().getName();

		// Check if the apiPhoneHandle exists on the found object
		Set<String> objectFields = sobjectType.getDescribe().fields.getMap().keySet();
		if(!objectFields.contains(apiPhoneHandle.toLowerCase())) {
			return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_BAD_REQUEST, 'API phone handle doesn\'t exists.'));
		}

		String query = String.join(new List<String> {
			'SELECT', 		apiPhoneHandle,
			'FROM', 		sobjectName,
			'WHERE ID =',	'\'' + String.valueOf(recordID) + '\'',
			'LIMIT', 		'1'
		}, ' ');
		List<SObject> objList = Database.query(query);

		// Return the results
		if(objList.isEmpty()) {
			// return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_BAD_REQUEST, 'Phone not found.'));
			return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_OK, ''));
		}
		SObject obj = objList[0];

		return JSON.serialize(new CMTelecomAPIConsumer.Response(CMTelecomAPIConsumer.STATUS_OK, (String)obj.get(apiPhoneHandle)));
	}

	/**
	* @description Concrete response class. Used for passing the select items to client.
	*/
	global class ResponseSelect extends CMTelecomAPIConsumer.AbstractResponse {

		/**
	    * @description Constructor.
		* @param statusCode The statuscode that has been given back.
	    */
		public ResponseSelect(Integer statusCode){
			super(statusCode);
		}

		/**
	    * @description Constructor.
		* @param statusCode The statuscode that has been given back.
		* @param details A defining message that has been given back.
	    */
		public ResponseSelect(Integer statusCode, String details){
			super(statusCode, details);
		}

		/**
	    * @description The extra field added to Response. Contains the list of select items.
	    */
		@AuraEnabled
		public List<SelectItem> items {get;set;}

		/* TODO
		 * At time of coding all the abstract properties of CMTelecomAPIConsumer.AbstractResponse,
		 * marked as @AuraEnabled are ignored once passed to client, only the concrete @AuraEnabled properties are passed
		 * to the lightning component. This is confirmed to be a bug and might get fixed later.
		 * For the time being all Response type objects are converted to JSON and back to object at client side.
		 * Source: http://salesforce.stackexchange.com/questions/123744/calling-apex-from-lightning-returning-a-class-extending-an-abstract-class
		 */
	}

	/**
	* @description Used to define a picklist item. Including the selected property, which SelectOption misses.
	*/
	global class SelectItem {

		/**
	    * @description Constructor.
		* @param label The text to be shown on the picklist.
		* @param value The value to be processed.
	    */
		public SelectItem(String label, String value) {
			this(label, value, 'false');
		}

		/**
	    * @description Constructor.
		* @param label The text to be shown on the picklist.
		* @param value The value to be processed.
		* @param selected Indicates if the item is default selected.
	    */
		public SelectItem(String label, String value, String selected) {
			this.label = label;
			this.value = value;
			this.selected = selected;
		}

		/**
	    * @description The text to be shown on the picklist.
	    */
		@AuraEnabled
		public String label {get;set;}

		/**
	    * @description The value to be processed.
	    */
		@AuraEnabled
		public String value {get;set;}

		/**
	    * @description Indicates if the item is default selected.
	    */
		@AuraEnabled
		public String selected {get;set;}
	}
}